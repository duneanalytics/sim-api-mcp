/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/Sim/beta/balances/svm/{address}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get SVM token balances for a given address
     * @description This endpoint returns SVM token balances for an address for any token that the address has interacted with
     */
    get: operations["getSvmBalances"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/beta/tokens/evm/{contract_address}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get EVM token prices for a specified contract address (or the native token), on any chain. */
    get: operations["getEvmTokenData"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/beta/transactions/svm/{address}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get SVM transactions for a given address
     * @description This endpoint returns transactions for a given address across several SVM chains.
     */
    get: operations["getSvmTransactions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/v1/balances/evm/chains": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of supported chains for the balances endpoint
     * @description The balances endpoint supports a wide range of chains, but not all chains are supported by all backends.
     *     This endpoint returns a list of chains that are supported by the balances endpoint.
     */
    get: operations["getEvmBalancesChains"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/v1/balances/evm/{address}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get EVM token balances for a given address
     * @description This endpoint returns EVM token balances for an address for any token that the address has interacted with
     */
    get: operations["getEvmBalances"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/v1/balances/evm/{address}/subscribe": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Subscribe to balances for a given address
     * @description This endpoint returns a websocket that can be used to subscribe to balances for a given address
     *     Every time the API detects a token transfer to or from this address, an update will be sent.
     */
    get: operations["subscribeEvmBalances"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/v1/transactions/evm/chains": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of supported chains for the transactions endpoint
     * @description This endpoint returns a list of chains that are supported by the transactions endpoint.
     *     The number of supported chains is currently limited, but we are working on extending support.
     */
    get: operations["getEvmTransactionsChains"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/v1/transactions/evm/{address}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get EVM transactions for a given address
     * @description This endpoint returns transactions for a given address across several EVM chains.
     *     By setting the decode parameter you can optionally choose to get both function calls and logs decoded.
     */
    get: operations["getEvmTransactions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/Sim/v1/transactions/evm/{address}/subscribe": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["subscribeEvmTransactions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    BalanceData: {
      address: string;
      amount: string;
      chain: string;
      /** Format: int64 */
      chain_id?: number;
      /** Format: int64 */
      decimals?: number | null;
      low_liquidity?: boolean;
      name?: string | null;
      /** Format: double */
      pool_size?: number | null;
      /** Format: double */
      price_usd?: number | null;
      symbol?: string | null;
      token_metadata?: components["schemas"]["ResponseTokenMetadata"] | null;
      /** Format: double */
      value_usd?: number | null;
    };
    BalanceErrorInformation: {
      address: string;
      /** Format: int64 */
      chain_id: number;
      description?: string;
    };
    BalanceErrors: {
      error_message?: string | null;
      token_errors?: components["schemas"]["BalanceErrorInformation"][];
    };
    BalancesResponse: {
      balances: components["schemas"]["BalanceData"][];
      errors?: components["schemas"]["BalanceErrors"] | null;
      next_offset?: string;
      request_time?: string | null;
      response_time?: string | null;
      /** @example 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 */
      wallet_address: string;
    };
    /** @enum {string} */
    Chain: "solana" | "eclipse";
    ChainEntry: {
      /** Format: int64 */
      id: number;
      name: string;
      tags: string[];
    };
    ChainsResponse: {
      chains: components["schemas"]["ChainEntry"][];
    };
    DecodedEvent: {
      inputs: components["schemas"]["Input"][];
      name: string;
    };
    DecodedFunction: {
      inputs: components["schemas"]["Input"][];
      name: string;
    };
    Input: {
      name: string;
      type: string;
      value: components["schemas"]["Token"];
    };
    Log: {
      address: string;
      data: string;
      topics: string[];
    };
    /** Format: int64 */
    Microseconds: number;
    ResponseLog: components["schemas"]["Log"] & {
      decoded?: components["schemas"]["DecodedEvent"] | null;
    };
    ResponseTokenMetadata: {
      logo?: string | null;
      url?: string | null;
    };
    ResponseTransaction: components["schemas"]["TransactionBase"] & {
      chain: string;
      decoded?: components["schemas"]["DecodedFunction"] | null;
      logs: components["schemas"]["ResponseLog"][];
    };
    Token: Record<string, never>;
    TokenData: {
      chain: string;
      /** Format: int64 */
      chain_id: number;
      /** Format: int32 */
      decimals?: number | null;
      /** Format: double */
      fully_diluted_value?: number | null;
      logo?: string | null;
      name?: string | null;
      /** Format: double */
      pool_size?: number | null;
      /** Format: double */
      price_usd?: number | null;
      symbol?: string | null;
      total_supply?: string | null;
    };
    /** @description Response type for both price endpoints. */
    TokensResponse: {
      contract_address: string;
      next_offset?: string;
      tokens: components["schemas"]["TokenData"][];
    };
    Transaction: {
      address: string;
      /** Format: int64 */
      block_slot: number;
      block_time?: components["schemas"]["Microseconds"] | null;
      chain: string;
      raw_transaction: Record<string, never>;
    };
    TransactionBase: {
      address: string;
      block_hash: string;
      /** Format: int64 */
      block_number: number;
      block_time: string;
      /** Format: int64 */
      chain_id: number;
      /** Format: binary */
      data: string;
      effective_gas_price?: string;
      from: string;
      gas_price: string;
      gas_used?: string;
      hash: string;
      /** Format: int64 */
      index: number;
      nonce: string;
      success?: boolean | null;
      to: string;
      transaction_type?: components["schemas"]["TransactionType"] | null;
      value: string;
    };
    /** @enum {string} */
    TransactionType: "Sender" | "Receiver";
    TransactionsResponse: {
      next_offset?: string;
      transactions: components["schemas"]["ResponseTransaction"][];
    };
    TransactionsSvmResponse: {
      next_offset?: string;
      transactions: components["schemas"]["Transaction"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getSvmBalances: {
    parameters: {
      query?: {
        /** @description Either 'all' or a comma separated list of chains to get balances for. Currently supports 'solana' and 'eclipse' */
        chains?: string | null;
        /** @description The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here. */
        offset?: string | null;
        /** @description Maximum number of transactions to return */
        limit?: number | null;
      };
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description Wallet to get balances for */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BalancesResponse"];
        };
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getEvmTokenData: {
    parameters: {
      query: {
        /**
         * @description Either 'all' or a comma separated list of chain ids to get balances for
         * @example 1,8453
         */
        chain_ids: string | null;
        /**
         * @description Maximum number of prices to return
         * @example 100
         */
        limit?: number | null;
        /** @description The offset to paginate through result sets; this is a cursor being passed from the previous response, only use what the backend returns here */
        offset?: string;
      };
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description The contract address of the token or 'native' for the native token of the chain */
        contract_address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokensResponse"];
        };
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getSvmTransactions: {
    parameters: {
      query?: {
        /** @description The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses. */
        offset?: string | null;
        /** @description Maximum number of transactions to return */
        limit?: number | null;
      };
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description Wallet to get transactions for */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TransactionsSvmResponse"];
        };
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getEvmBalancesChains: {
    parameters: {
      query?: never;
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChainsResponse"];
        };
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getEvmBalances: {
    parameters: {
      query?: {
        /** @description A comma separated list of chain_ids or tags for blockchains to get balances for. Examples: chain_ids=1,8453,10, chain_ids=mainnet,testnet.  Only balances for blockchains tagged with all the specified tags are returned. Please see the response of the /chains endpoint for the tags on each blockchain. */
        chain_ids?: string | null;
        /** @description Specify this to exclude spam tokens from the response */
        exclude_spam_tokens?: string | null;
        /** @description Specify `ERC20` or `NATIVE` to get only ERC20 tokens or native assets, respectively */
        filters?: string | null;
        /** @description A comma separated list of additional metadata fields to include for each token. Supported values: `logo`, `url` */
        metadata?: string | null;
        /** @description The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend returns here. */
        offset?: string | null;
        /** @description Maximum number of transactions to return */
        limit?: number | null;
      };
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description Wallet to get balances for */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BalancesResponse"];
        };
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  subscribeEvmBalances: {
    parameters: {
      query?: {
        /** @description Comma separated list of chain ids to filter by */
        chain_ids?: string | null;
      };
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description Wallet to get balances for */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response, Connection: Upgrade to WebSocket */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getEvmTransactionsChains: {
    parameters: {
      query?: never;
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ChainsResponse"];
        };
      };
      /** @description Internal Server Error - A generic error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getEvmTransactions: {
    parameters: {
      query: {
        /** @description The offset to paginate through result sets. This is a cursor being passed from the previous response, only use what the backend has returned on previous responses. */
        offset: string;
        /** @description Maximum number of transactions to return */
        limit?: number | null;
        /** @description Return only transactions before this block time */
        block_time?: number | null;
        /** @description Comma separated list of chain ids to get transactions for */
        chain_ids?: string | null;
        /** @description Filter transactions to a given address */
        to?: string | null;
        /** @description Return only transactions with this method id */
        method_id?: string | null;
        /** @description Return abi decoded transactions and logs */
        decode?: boolean | null;
        /** @description Return only transactions with this address in logs */
        log_address?: string | null;
        /** @description Return only transactions with this topic0 in logs */
        topic0?: string | null;
        /** @description Return only transactions from blocks with block number equal to or greater than this value */
        min_block_number?: number | null;
      };
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description Wallet to get transactions for */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TransactionsResponse"];
        };
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  subscribeEvmTransactions: {
    parameters: {
      query?: never;
      header: {
        /** @description API key to access the service */
        "X-Dune-Api-Key": string;
      };
      path: {
        /** @description Wallet to get transactions for */
        address: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response, Connection: Upgrade to WebSocket */
      101: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request - The request could not be understood by the server due to malformed data */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - A generic error occurred on the server. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
